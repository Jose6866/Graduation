// Generated by gencpp from file ros_yolo/Depth.msg
// DO NOT EDIT!


#ifndef ROS_YOLO_MESSAGE_DEPTH_H
#define ROS_YOLO_MESSAGE_DEPTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_yolo
{
template <class ContainerAllocator>
struct Depth_
{
  typedef Depth_<ContainerAllocator> Type;

  Depth_()
    : depth_x(0.0)
    , depth_y(0.0)
    , depth_w(0.0)
    , depth_h(0.0)
    , depth_label()
    , depth_conf(0.0)
    , depth_center_x(0.0)
    , depth_center_y(0.0)
    , depth_depth(0.0)  {
    }
  Depth_(const ContainerAllocator& _alloc)
    : depth_x(0.0)
    , depth_y(0.0)
    , depth_w(0.0)
    , depth_h(0.0)
    , depth_label(_alloc)
    , depth_conf(0.0)
    , depth_center_x(0.0)
    , depth_center_y(0.0)
    , depth_depth(0.0)  {
  (void)_alloc;
    }



   typedef double _depth_x_type;
  _depth_x_type depth_x;

   typedef double _depth_y_type;
  _depth_y_type depth_y;

   typedef double _depth_w_type;
  _depth_w_type depth_w;

   typedef double _depth_h_type;
  _depth_h_type depth_h;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _depth_label_type;
  _depth_label_type depth_label;

   typedef double _depth_conf_type;
  _depth_conf_type depth_conf;

   typedef double _depth_center_x_type;
  _depth_center_x_type depth_center_x;

   typedef double _depth_center_y_type;
  _depth_center_y_type depth_center_y;

   typedef double _depth_depth_type;
  _depth_depth_type depth_depth;





  typedef boost::shared_ptr< ::ros_yolo::Depth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_yolo::Depth_<ContainerAllocator> const> ConstPtr;

}; // struct Depth_

typedef ::ros_yolo::Depth_<std::allocator<void> > Depth;

typedef boost::shared_ptr< ::ros_yolo::Depth > DepthPtr;
typedef boost::shared_ptr< ::ros_yolo::Depth const> DepthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_yolo::Depth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_yolo::Depth_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_yolo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ros_yolo': ['/home/cilab/project/src/ros_yolo/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_yolo::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_yolo::Depth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_yolo::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_yolo::Depth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_yolo::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_yolo::Depth_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_yolo::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4ede3d2c7cd4b8d21ed03ddcfba37e7";
  }

  static const char* value(const ::ros_yolo::Depth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4ede3d2c7cd4b8dULL;
  static const uint64_t static_value2 = 0x21ed03ddcfba37e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_yolo::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_yolo/Depth";
  }

  static const char* value(const ::ros_yolo::Depth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_yolo::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 depth_x\n\
float64 depth_y\n\
float64 depth_w\n\
float64 depth_h\n\
string depth_label\n\
float64 depth_conf\n\
float64 depth_center_x\n\
float64 depth_center_y\n\
float64 depth_depth\n\
";
  }

  static const char* value(const ::ros_yolo::Depth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_yolo::Depth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depth_x);
      stream.next(m.depth_y);
      stream.next(m.depth_w);
      stream.next(m.depth_h);
      stream.next(m.depth_label);
      stream.next(m.depth_conf);
      stream.next(m.depth_center_x);
      stream.next(m.depth_center_y);
      stream.next(m.depth_depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Depth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_yolo::Depth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_yolo::Depth_<ContainerAllocator>& v)
  {
    s << indent << "depth_x: ";
    Printer<double>::stream(s, indent + "  ", v.depth_x);
    s << indent << "depth_y: ";
    Printer<double>::stream(s, indent + "  ", v.depth_y);
    s << indent << "depth_w: ";
    Printer<double>::stream(s, indent + "  ", v.depth_w);
    s << indent << "depth_h: ";
    Printer<double>::stream(s, indent + "  ", v.depth_h);
    s << indent << "depth_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.depth_label);
    s << indent << "depth_conf: ";
    Printer<double>::stream(s, indent + "  ", v.depth_conf);
    s << indent << "depth_center_x: ";
    Printer<double>::stream(s, indent + "  ", v.depth_center_x);
    s << indent << "depth_center_y: ";
    Printer<double>::stream(s, indent + "  ", v.depth_center_y);
    s << indent << "depth_depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth_depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_YOLO_MESSAGE_DEPTH_H
